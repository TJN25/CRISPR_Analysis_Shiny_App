distance.window <- 10000
##store input variable for use later
input.dat <- dat%>%filter(Subtype == Subtype.label)
input.subtype <- Subtype.label
dat <- dat%>%filter(Subtype == Subtype.label)
dat <- dat%>%filter(spacer_order.num > 1)#%>%filter(protospacer.distance.num != -1)%>%filter(protospacer.distance.num != 1)%>%filter(protospacer.distance.num != -2)%>%filter(protospacer.distance.num != 2)%>%filter(protospacer.distance.num != -3)%>%filter(protospacer.distance.num != 3)
dat <- dat%>%filter(protospacer.distance.num > -xlim.num)%>%filter(protospacer.distance.num < xlim.num)
##get maximum count for the graphs
targets.dat.n0 <- dat%>%filter(Subtype == Subtype.label)
aa <- targets.dat.n0%>%filter(strand.plus.direction == "n_3")
bb <- targets.dat.n0%>%filter(strand.plus.direction == "n_5")
cc <- targets.dat.n0%>%filter(strand.plus.direction == "t_3")
dd <- targets.dat.n0%>%filter(strand.plus.direction == "t_5")
bins.max <- max(c(max(hist(aa$protospacer.distance.num, breaks = (distance.window)/binwidth.val, plot = F)$counts),
max(hist(bb$protospacer.distance.num, breaks = (distance.window)/binwidth.val, plot = F)$counts),
max(hist(cc$protospacer.distance.num, breaks = (distance.window)/binwidth.val, plot = F)$counts),
max(hist(dd$protospacer.distance.num, breaks = (distance.window)/binwidth.val, plot = F)$counts)))
##set up data for plotting
dat <- dat%>%mutate(protospacer.distance.num = ifelse(five.three.prime.dir == "3", protospacer.distance.num + binwidth.val/2,  protospacer.distance.num - binwidth.val/2))
dat <- dat%>%mutate(protospacer.distance.num = ifelse(target.strand == "t", protospacer.distance.num, protospacer.distance.num*(-1)))
targets.dat.n0 <- dat%>%filter(Subtype == Subtype.label)
plot.title1 <- ifelse(distance.window != binwidth.val, paste("RANDOM DATA: Distribution of Subtype ", Subtype.label, " hits (", nrow(targets.dat.n0), " hits.)" , sep = ""),  paste("Quadrant distribution of Subtype ", Subtype.label, " hits (", nrow(targets.dat.n0), " hits)", sep = ""))
plot.subtitle <- ifelse(distance.window != binwidth.val, paste("Window size = ", distance.window, " nucleotides. \nBinwdith = ", binwidth.val, " nucleotides.", sep = ""),  paste("Window size = ", distance.window, " nucleotides.", sep = ""))
GenomeEndDensities <- genome.ends.distr(Subtype.label = input.subtype, dat = input.dat)
GenomeEndDensities <- GenomeEndDensities%>%arrange(distance.breaks.short)
xlim.num <- calculateXlimits(input.dat)
p <- ggplot() +
geom_path(data = GenomeEndDensities, aes(x = distance.breaks.short, y = density.values)) +
coord_cartesian(xlim = c(-xlim.num, xlim.num))
return(p)
}
calculateXlimits <- function(dat){
sdNumbers <- 2
##get some of the oldest match information
pps.dat <- dat%>%filter(spacer_order.num == 1)%>%mutate(ppsToGenomeEnds = genome.length.num - target.start.num)
xlim.num <- max(c(mean(pps.dat$target.start.num) + sdNumbers*sd(pps.dat$target.start.num),
mean(pps.dat$ppsToGenomeEnds) + sdNumbers*sd(pps.dat$ppsToGenomeEnds)))
return(xlim.num)
}
genome.ends.distr <- function(Subtype.label = "I-F", dat = targets.dat){
sdNumbers <- 2
dat <- dat%>%mutate(ppsToGenomeEnds = genome.length.num - target.start.num)
pps.dat <- dat%>%filter(spacer_order.num == 1)
pps.dat <- pps.dat%>%filter(Subtype == Subtype.label)
xlim.num <- max(c(mean(pps.dat$target.start.num) + sdNumbers*sd(pps.dat$target.start.num),
mean(pps.dat$ppsToGenomeEnds) + sdNumbers*sd(pps.dat$ppsToGenomeEnds)))
binwidth.val <- mean(pps.dat$genome.length.num)/10
D <- dat%>%filter(spacer_order.num > 1)%>%select(target.start.num, ppsToGenomeEnds)%>%mutate(data.type = "genome lengths")
GenomeStart <- D %>% group_by(data.type) %>%
# calculate densities for each group over same range; store in list column
summarise(d = list(density(target.start.num, from = min(.$target.start.num), to = max(.$target.start.num), n = xlim.num/binwidth.val*2))) %>%
# make a new data.frame from two density objects
do(data.frame(distance.breaks.short = .$d[[1]]$x,    # grab one set of x values (which are the same)
density.values = .$d[[1]]$y))# %>%    # and subtract the y values
GenomeStart <- GenomeStart%>%mutate(distance.breaks.short = -distance.breaks.short)
GenomeEnd <- D %>% group_by(data.type) %>%
# calculate densities for each group over same range; store in list column
summarise(d = list(density(ppsToGenomeEnds, from = min(.$ppsToGenomeEnds), to = max(.$ppsToGenomeEnds), n = xlim.num/binwidth.val*2))) %>%
# make a new data.frame from two density objects
do(data.frame(distance.breaks.short = .$d[[1]]$x,    # grab one set of x values (which are the same)
density.values = .$d[[1]]$y))# %>%    # and subtract the y values
den <- rbind(GenomeStart, GenomeEnd)
return(den)
}
TargetsandRandomDensities <- function(D = rbind(sr, st), xlimit = xlim.num,   smoothing.value = "nrd0"
){
xlim.num <- xlimit
n_3.den <- D%>%filter(grepl("n_", strand.plus.direction))  %>%
group_by(data.type) %>%
# calculate densities for each group over same range; store in list column
summarise(d = list(density(protospacer.distance.num, from = -xlim.num, to = 0, n = xlim.num/binwidth.val, bw = smoothing.value))) %>%
# make a new data.frame from two density objects
do(data.frame(distance.breaks.short = .$d[[1]]$x,    # grab one set of x values (which are the same)
density.values.random_1 = .$d[[1]]$y,
density.values.random_10 = .$d[[2]]$y,
density.values.random_2 = .$d[[3]]$y,
density.values.random_3 = .$d[[4]]$y,
density.values.random_4 = .$d[[5]]$y,
density.values.random_5 = .$d[[6]]$y,
density.values.random_6 = .$d[[7]]$y,
density.values.random_7 = .$d[[8]]$y,
density.values.random_8 = .$d[[9]]$y,
density.values.random_9 = .$d[[10]]$y,
density.values.targets = .$d[[11]]$y))# %>%    # and subtract the y values
n_5.den <- D%>%filter(grepl("n_", strand.plus.direction))%>%
group_by(data.type) %>%
# calculate densities for each group over same range; store in list column
summarise(d = list(density(protospacer.distance.num, from = 0, to = xlim.num, n = xlim.num/binwidth.val, bw = smoothing.value))) %>%
# make a new data.frame from two density objects
do(data.frame(distance.breaks.short = .$d[[1]]$x,    # grab one set of x values (which are the same)
density.values.random_1 = .$d[[1]]$y,
density.values.random_10 = .$d[[2]]$y,
density.values.random_2 = .$d[[3]]$y,
density.values.random_3 = .$d[[4]]$y,
density.values.random_4 = .$d[[5]]$y,
density.values.random_5 = .$d[[6]]$y,
density.values.random_6 = .$d[[7]]$y,
density.values.random_7 = .$d[[8]]$y,
density.values.random_8 = .$d[[9]]$y,
density.values.random_9 = .$d[[10]]$y,
density.values.targets = .$d[[11]]$y))# %>%    # and subtract the y values
t_3.den <- D%>%filter(grepl("t_", strand.plus.direction))%>%
group_by(data.type) %>%
# calculate densities for each group over same range; store in list column
summarise(d = list(density(protospacer.distance.num, from = 0, to = xlim.num, n = xlim.num/binwidth.val, bw = smoothing.value))) %>%
# make a new data.frame from two density objects
do(data.frame(distance.breaks.short = .$d[[1]]$x,    # grab one set of x values (which are the same)
density.values.random_1 = .$d[[1]]$y,
density.values.random_10 = .$d[[2]]$y,
density.values.random_2 = .$d[[3]]$y,
density.values.random_3 = .$d[[4]]$y,
density.values.random_4 = .$d[[5]]$y,
density.values.random_5 = .$d[[6]]$y,
density.values.random_6 = .$d[[7]]$y,
density.values.random_7 = .$d[[8]]$y,
density.values.random_8 = .$d[[9]]$y,
density.values.random_9 = .$d[[10]]$y,
density.values.targets = .$d[[11]]$y))# %>%    # and subtract the y values
t_5.den <- D%>%filter(grepl("t_", strand.plus.direction))%>%
group_by(data.type) %>%
# calculate densities for each group over same range; store in list column
summarise(d = list(density(protospacer.distance.num, from = -xlim.num, to = 0, n = xlim.num/binwidth.val, bw = smoothing.value))) %>%
# make a new data.frame from two density objects
do(data.frame(distance.breaks.short = .$d[[1]]$x,    # grab one set of x values (which are the same)
density.values.random_1 = .$d[[1]]$y,
density.values.random_10 = .$d[[2]]$y,
density.values.random_2 = .$d[[3]]$y,
density.values.random_3 = .$d[[4]]$y,
density.values.random_4 = .$d[[5]]$y,
density.values.random_5 = .$d[[6]]$y,
density.values.random_6 = .$d[[7]]$y,
density.values.random_7 = .$d[[8]]$y,
density.values.random_8 = .$d[[9]]$y,
density.values.random_9 = .$d[[10]]$y,
density.values.targets = .$d[[11]]$y))# %>%    # and subtract the y values
n_3.den <- n_3.den%>%mutate(strand.plus.direction = "n_3")
n_5.den <- n_5.den%>%mutate(strand.plus.direction = "n_5")
t_3.den <- t_3.den%>%mutate(strand.plus.direction = "t_3")
t_5.den <- t_5.den%>%mutate(strand.plus.direction = "t_5")
#  colnames(n_3.den) <- colnames(n_3.den)
#  colnames(n_5.den) <- colnames(n_3.den)
#  colnames(t_3.den) <- colnames(n_3.den)
#  colnames(t_5.den) <- colnames(n_3.den)
den <- rbind(n_3.den, n_5.den, t_3.den, t_5.den)
#  den <- rbind(n_5.den, t_5.den)
rDen1 <- den%>%mutate(density.values = density.values.random_1)%>%select(distance.breaks.short, density.values, strand.plus.direction)%>%mutate(group =  "random_1")%>%mutate(group.main =  "random")
rDen2 <- den%>%mutate(density.values = density.values.random_2)%>%select(distance.breaks.short, density.values, strand.plus.direction)%>%mutate(group =  "random_2")%>%mutate(group.main =  "random")
rDen3 <- den%>%mutate(density.values = density.values.random_3)%>%select(distance.breaks.short, density.values, strand.plus.direction)%>%mutate(group =  "random_3")%>%mutate(group.main =  "random")
rDen4 <- den%>%mutate(density.values = density.values.random_4)%>%select(distance.breaks.short, density.values, strand.plus.direction)%>%mutate(group =  "random_4")%>%mutate(group.main =  "random")
rDen5 <- den%>%mutate(density.values = density.values.random_5)%>%select(distance.breaks.short, density.values, strand.plus.direction)%>%mutate(group =  "random_5")%>%mutate(group.main =  "random")
rDen6 <- den%>%mutate(density.values = density.values.random_6)%>%select(distance.breaks.short, density.values, strand.plus.direction)%>%mutate(group =  "random_6")%>%mutate(group.main =  "random")
rDen7 <- den%>%mutate(density.values = density.values.random_7)%>%select(distance.breaks.short, density.values, strand.plus.direction)%>%mutate(group =  "random_7")%>%mutate(group.main =  "random")
rDen8 <- den%>%mutate(density.values = density.values.random_8)%>%select(distance.breaks.short, density.values, strand.plus.direction)%>%mutate(group =  "random_8")%>%mutate(group.main =  "random")
rDen9 <- den%>%mutate(density.values = density.values.random_9)%>%select(distance.breaks.short, density.values, strand.plus.direction)%>%mutate(group =  "random_9")%>%mutate(group.main =  "random")
rDen10 <- den%>%mutate(density.values = density.values.random_10)%>%select(distance.breaks.short, density.values, strand.plus.direction)%>%mutate(group =  "random_10")%>%mutate(group.main =  "random")
tDen <- den%>%mutate(density.values = density.values.targets)%>%select(distance.breaks.short, density.values, strand.plus.direction)%>%mutate(group =  "targets")%>%mutate(group.main =  "targets")
den <- rbind(rDen1,rDen2,rDen3,rDen4,rDen5,rDen6,rDen7,rDen8,rDen9,rDen10, tDen)
den <- den%>%arrange(distance.breaks.short)
sdrandomDensity <- den%>%filter(group.main == "random")%>%group_by(distance.breaks.short, strand.plus.direction)%>%summarise(sdDensity = sd(density.values))%>%mutate(breaksStrandDirection = paste(distance.breaks.short, strand.plus.direction, sep = "$"))%>%ungroup()%>%select(-strand.plus.direction, - distance.breaks.short)
meanrandomDensity <- den%>%filter(group.main == "random")%>%group_by(distance.breaks.short, strand.plus.direction)%>%summarise(meanDensity = mean(density.values))%>%mutate(breaksStrandDirection = paste(distance.breaks.short, strand.plus.direction, sep = "$"))
randomDensity <- left_join(sdrandomDensity, meanrandomDensity, by = "breaksStrandDirection")
randomDensity <- randomDensity%>%mutate(upperRandomDensity = meanDensity + 2*sdDensity)%>%mutate(lowerRandomDensity = meanDensity - 2*sdDensity)
targetDensity <- den%>%filter(group == "targets")
upperRandomDensityValues <- randomDensity%>%mutate(density.values = upperRandomDensity)%>%select(distance.breaks.short, density.values, strand.plus.direction)%>%mutate(group = "upperRandomDensity")%>%mutate(group.main = "random")
lowerRandomDensityValues <- randomDensity%>%mutate(density.values = lowerRandomDensity)%>%select(distance.breaks.short, density.values, strand.plus.direction)%>%mutate(group = "lowerRandomDensity")%>%mutate(group.main = "random")
meanRandomDensityValues <- randomDensity%>%mutate(density.values = meanDensity)%>%select(distance.breaks.short, density.values, strand.plus.direction)%>%mutate(group = "meanDensity")%>%mutate(group.main = "random")
den <- rbind(targetDensity, upperRandomDensityValues, lowerRandomDensityValues, meanRandomDensityValues)
return(den)
}
plotAdjustedDistribution <- function(dat = targets.dat, random.hits = rh,  Subtype.label = "I-B", smoothing.val = "nrd0"){
input.dat <- dat
input.subtype <- Subtype.label
binwidth.val <- 150
xlim.num <- 10000
rd <- rh%>%filter(Subtype == Subtype.label)
td <- targets.dat%>%filter(Subtype == Subtype.label)
xlim.num <- 10000
sr <- rd%>%filter(protospacer.distance.num > -xlim.num)%>%filter(protospacer.distance.num < xlim.num)%>%filter(spacer_order.num > 1)
st <- td%>%filter(protospacer.distance.num > -xlim.num)%>%filter(protospacer.distance.num < xlim.num)%>%filter(spacer_order.num > 1)
sr <- sr%>%mutate(data.type = paste("random", group.number, sep = "_"))
st <- st%>%mutate(data.type = "targets")%>%
mutate(strand = ifelse(strand.plus.direction == "n_5", "n", ifelse(strand.plus.direction == "n_3", "n", "t")))%>%
mutate(protospacer.distance.num = ifelse(strand == "n", -protospacer.distance.num, protospacer.distance.num))%>%
select(-strand)
sr <- sr%>%select(protospacer.distance.num, data.type, strand.plus.direction)
st <- st%>%select(protospacer.distance.num, data.type, strand.plus.direction)
den <- rbind(sr, st)
den <- TargetsandRandomDensities(D = den, xlimit = xlim.num, smoothing.value = smoothing.val)
targetDensities <- den%>%filter(group.main == "targets")%>%mutate(break.id = paste(distance.breaks.short, strand.plus.direction))%>%select(density.values, break.id)
randomDensities <- den%>%filter(group.main == "random")%>%mutate(break.id = paste(distance.breaks.short, strand.plus.direction))
den <- left_join(randomDensities, targetDensities, by = "break.id", smoothing.value = smoothing.val)
den <- den%>%mutate(density.values = density.values.y/density.values.x)
den <- den%>%mutate(group.main = "Adjusted Target Densities")
den <- den%>%arrange(distance.breaks.short)
plot.title1 <- paste("Subtype",Subtype.label)
plot.subtitle <- paste("Number of hits:", nrow(st))
p <- suppressWarnings(ggplot() +
geom_path(data = den%>%filter(grepl("t_", strand.plus.direction))%>%filter(group == "upperRandomDensity"), aes(x = distance.breaks.short, y = density.values, fill = strand.plus.direction, colour = group.main, group = group), linetype="dotted") +
geom_path(data = den%>%filter(grepl("t_", strand.plus.direction))%>%filter(group == "lowerRandomDensity"), aes(x = distance.breaks.short, y = density.values, fill = strand.plus.direction, colour = group.main, group = group), linetype="dotted") +
geom_path(data = den%>%filter(grepl("t_", strand.plus.direction))%>%filter(group == "meanDensity"), aes(x = distance.breaks.short, y = density.values, fill = strand.plus.direction, colour = group.main, group = group)) +
geom_path(data = den%>%mutate(density.values = -density.values)%>%filter(grepl("n_", strand.plus.direction))%>%filter(group == "upperRandomDensity"), aes(x = distance.breaks.short, y = density.values, fill = strand.plus.direction, colour = group.main, group = group), linetype="dotted")+
geom_path(data = den%>%mutate(density.values = -density.values)%>%filter(grepl("n_", strand.plus.direction))%>%filter(group == "lowerRandomDensity"), aes(x = distance.breaks.short, y = density.values, fill = strand.plus.direction, colour = group.main, group = group), linetype="dotted")+
geom_path(data = den%>%mutate(density.values = -density.values)%>%filter(grepl("n_", strand.plus.direction))%>%filter(group == "meanDensity"), aes(x = distance.breaks.short, y = density.values, fill = strand.plus.direction, colour = group.main, group = group))+
geom_hline(yintercept = 1) +
geom_hline(yintercept = -1) +
geom_hline(yintercept = 0.5, linetype="dashed") +
geom_hline(yintercept = -0.5, linetype="dashed") +
geom_hline(yintercept = 2, linetype="dashed") +
geom_hline(yintercept = -2, linetype="dashed") +
scale_fill_hue("Group") +
ggtitle(label = plot.title1, subtitle = plot.subtitle) +
labs(x="Distance from oldest protospacer (nucleotides)",y="Density of hits") +
coord_cartesian(ylim = c(-max(den$density.values)*1.1,max(den$density.values)*1.1),xlim = c(-xlim.num*1.1, xlim.num*1.1)) +
theme_bw() +
theme(axis.text.x=element_text(size=14),
axis.text.y=element_text(size=14),
plot.title=element_text(size=12, face="bold", color="black"))
)
return(p)
}
plotProtospacerAndRandomDistribution <- function(dat = targets.dat, random.hits = rh,  Subtype.label = "I-B", smoothing.val = 150
){
input.dat <- dat
input.subtype <- Subtype.label
binwidth.val <- 150
xlim.num <- 10000
xlimit <- xlim.num
binwidth <- binwidth.val
rd <- random.hits%>%filter(Subtype == Subtype.label)
td <- dat%>%filter(Subtype == Subtype.label)
sr <- rd%>%filter(protospacer.distance.num > -xlim.num)%>%filter(protospacer.distance.num < xlim.num)%>%filter(spacer_order.num > 1)
st <- td%>%filter(protospacer.distance.num > -xlim.num)%>%filter(protospacer.distance.num < xlim.num)%>%filter(spacer_order.num > 1)
sr <- sr%>%mutate(data.type = paste("random", group.number, sep = "_"))%>%
mutate(data.type = ifelse(data.type == "random_1", "random_01", data.type))
st <- st%>%mutate(data.type = "targets")%>%
mutate(strand = ifelse(strand.plus.direction == "n_5", "n", ifelse(strand.plus.direction == "n_3", "n", "t")))%>%
mutate(protospacer.distance.num = ifelse(strand == "n", -protospacer.distance.num, protospacer.distance.num))%>%
select(-strand)
sr <- sr%>%select(protospacer.distance.num, data.type, strand.plus.direction)
st <- st%>%select(protospacer.distance.num, data.type, strand.plus.direction)
den <- rbind(sr, st)
den <- TargetsandRandomDensities(D = den, xlimit = xlim.num, smoothing.value = smoothing.val)
#den <- HitsDistribution(dat = den, xlim.num = xlimit, binwidth.val = binwidth)
plot.title1 <- paste("Subtype",Subtype.label)
plot.subtitle <- paste("Number of hits:", nrow(st))
p <- suppressWarnings(ggplot() +
geom_path(data = den%>%filter(grepl("t_", strand.plus.direction))%>%filter(group == "upperRandomDensity"), aes(x = distance.breaks.short, y = density.values, fill = strand.plus.direction, colour = group.main, group = group), linetype="dotted") +
geom_path(data = den%>%filter(grepl("t_", strand.plus.direction))%>%filter(group == "lowerRandomDensity"), aes(x = distance.breaks.short, y = density.values, fill = strand.plus.direction, colour = group.main, group = group), linetype="dotted") +
geom_path(data = den%>%filter(grepl("t_", strand.plus.direction))%>%filter(group == "meanDensity"), aes(x = distance.breaks.short, y = density.values, fill = strand.plus.direction, colour = group.main, group = group)) +
geom_path(data = den%>%filter(grepl("t_", strand.plus.direction))%>%filter(group == "targets"), aes(x = distance.breaks.short, y = density.values, fill = strand.plus.direction, colour = group.main, group = group)) +
geom_path(data = den%>%mutate(density.values= -density.values)%>%filter(grepl("n_", strand.plus.direction))%>%filter(group == "upperRandomDensity"), aes(x = distance.breaks.short, y = density.values, fill = strand.plus.direction, colour = group.main, group = group), linetype="dotted")+
geom_path(data = den%>%mutate(density.values= -density.values)%>%filter(grepl("n_", strand.plus.direction))%>%filter(group == "lowerRandomDensity"), aes(x = distance.breaks.short, y = density.values, fill = strand.plus.direction, colour = group.main, group = group), linetype="dotted")+
geom_path(data = den%>%mutate(density.values= -density.values)%>%filter(grepl("n_", strand.plus.direction))%>%filter(group == "meanDensity"), aes(x = distance.breaks.short, y = density.values, fill = strand.plus.direction, colour = group.main, group = group))+
geom_path(data = den%>%mutate(density.values= -density.values)%>%filter(grepl("n_", strand.plus.direction))%>%filter(group == "targets"), aes(x = distance.breaks.short, y = density.values, fill = strand.plus.direction, colour = group.main, group = group)) +
ggtitle(label = plot.title1, subtitle = plot.subtitle) +
labs(x="Distance from oldest protospacer (nucleotides)",y="Density of hits") +
theme_bw() +
theme(axis.text.x=element_text(size=14),
axis.text.y=element_text(size=14),
plot.title=element_text(size=12, face="bold", color="black"))
)
return(p)
}
random.hits.generate <- function(dat = targets.dat, loop.length = 100, set.seed.val = T){
if(set.seed.val){
set.seed(100)
}
targets.dat.replicated <- dat[rep(seq_len(nrow(targets.dat)), loop.length), ]
#targets.dat.replicated%>%targets.dat.replicated%>%filter(spacer.order_num > 1)
random.hits <- targets.dat.replicated%>%
mutate(protospacer.distance.num = runif(min = -0.5, max = 0.5, n = nrow(targets.dat.replicated)))%>%
mutate(protospacer.distance.num = round(protospacer.distance.num*genome.length.num, 0))%>%
mutate(protospacer.distance.num = ifelse(spacer_order.num == 1, 0, protospacer.distance.num))%>%
mutate(target.strand = round(runif(min = 0, max = 1, n = nrow(targets.dat.replicated)), 0))%>%
mutate(target.strand = ifelse(target.strand == 1, "t", "n"))%>%
mutate(five.three.prime.dir = ifelse(protospacer.distance.num < 0, ifelse(target.strand == "t", 5, 3), ifelse(target.strand == "t", 3, 5)))%>%
mutate(strand.plus.direction = paste(target.strand, five.three.prime.dir, sep = "_"))%>%
mutate(target.start.num = runif(min = 0, max = 1, n = nrow(targets.dat.replicated)))%>%
mutate(target.start.num = round(target.start.num*genome.length.num, 0))
rm(targets.dat.replicated)
return(random.hits)
}
slidingWindow <- function(inputData = den, xlimit = xlim.num, binwidth = binwidth.val){
total.hits <- nrow(inputData)
inputData <- inputData%>%mutate(groupandPosition = paste(data.type, strand.plus.direction, sep = "$"))
hitPostionsMatrix<-matrix(list(),nrow = total.hits, ncol = 5)
hitPostionsMatrix[,1] <- inputData$protospacer.distance.num
hitPostionsMatrix[,2] <- inputData$protospacer.distance.num - binwidth/2
hitPostionsMatrix[,3] <- inputData$protospacer.distance.num + binwidth/2
hitPostionsMatrix[,5] <- inputData$groupandPosition
i <- 1
for(i in 1:total.hits){
hitPostionsMatrix[[i, 4]] <- hitPostionsMatrix[[i, 2]]:hitPostionsMatrix[[i, 3]]
}
binsDat <- data.frame(slidingPositions = NA, Freq = NA, groupandPosition = NA)
for(i in unique(inputData$groupandPosition)){
dat <- hitPostionsMatrix[hitPostionsMatrix[, 5]== i,]
hits.count <- nrow(dat)
slidingPositions <- sort(unlist(dat[,4]))
binsDatTmp <- as.data.frame(table(slidingPositions))
if(grepl("t_5", dat[1, 5])){
binsDatTmp <- suppressWarnings(left_join( data.frame(slidingPositions = as.character((-xlimit + binwidth/2):(-binwidth/2))), binsDatTmp, "slidingPositions"))
}
if(grepl("n_5", dat[1, 5])){
binsDatTmp <- suppressWarnings(left_join( data.frame(slidingPositions = as.character((binwidth/2):(xlimit - binwidth/2))), binsDatTmp, "slidingPositions"))
}
if(grepl("t_3", dat[1, 5])){
binsDatTmp <- suppressWarnings(left_join( data.frame(slidingPositions = as.character((binwidth/2):(xlimit - binwidth/2))), binsDatTmp, "slidingPositions"))
}
if(grepl("n_3", dat[1, 5])){
binsDatTmp <- suppressWarnings(left_join( data.frame(slidingPositions = as.character((-xlimit + binwidth/2):(-binwidth/2))), binsDatTmp, "slidingPositions"))
}
binsDatTmp <- binsDatTmp%>%mutate(groupandPosition = rep(i, nrow(binsDatTmp)))
binsDat <- rbind(binsDat, binsDatTmp)
}
binsDat <- binsDat%>%
mutate(distance.breaks.short = as.numeric(slidingPositions))%>%mutate(Freq = ifelse(is.na(Freq), 0, Freq))%>%
mutate(density.values= Freq/total.hits)%>%
select(-slidingPositions)%>%
arrange(distance.breaks.short)
return(binsDat)
}
HitsDistribution <- function(dat = den, xlim.num = xlimit, binwidth.val = binwidth){
binsDat <- slidingWindow(inputData = dat, xlimit = xlim.num, binwidth = binwidth.val)
rDen <- binsDat%>%filter(grepl("random", groupandPosition))%>%select(distance.breaks.short, density.values, groupandPosition)%>%mutate(group.main =  "random")
tDen <- binsDat%>%filter(grepl("targets", groupandPosition))%>%select(distance.breaks.short, density.values, groupandPosition)%>%mutate(group.main =  "targets")
binsDat <- rbind(rDen, tDen)
binsDat <- binsDat%>%arrange(distance.breaks.short)
binsDat <- separate(binsDat, col = groupandPosition, into = c("group", "strand.plus.direction"), sep = "\\$")
sdrandomDensity <- binsDat%>%filter(group.main == "random")%>%
group_by(distance.breaks.short, strand.plus.direction)%>%
summarise(sdDensity = sd(density.values))%>%
mutate(breaksStrandDirection = paste(distance.breaks.short, strand.plus.direction, sep = "_"))%>%
ungroup()%>%select(-strand.plus.direction, - distance.breaks.short)
meanrandomDensity <- binsDat%>%filter(group.main == "random")%>%group_by(distance.breaks.short, strand.plus.direction)%>%summarise(meanDensity = mean(density.values))%>%mutate(breaksStrandDirection = paste(distance.breaks.short, strand.plus.direction, sep = "_"))
randomDensity <- left_join(sdrandomDensity, meanrandomDensity, by = "breaksStrandDirection")
randomDensity <- randomDensity%>%mutate(upperRandomDensity = meanDensity + 2*sdDensity)%>%mutate(lowerRandomDensity = meanDensity - 2*sdDensity)
targetDensity <- binsDat%>%filter(group.main == "targets")
targetsDensityTotal <- sum(targetDensity$density.values)
randomDensityTotal <- sum(randomDensity$meanDensity)
targetDensity <- targetDensity%>%
mutate(density.values = density.values/targetsDensityTotal)
randomDensity <- randomDensity%>%
mutate(meanDensity = meanDensity/randomDensityTotal)%>%
mutate(upperRandomDensity = upperRandomDensity/randomDensityTotal)%>%
mutate(lowerRandomDensity = lowerRandomDensity/randomDensityTotal)
upperRandomDensityValues <- randomDensity%>%mutate(density.values= upperRandomDensity)%>%select(distance.breaks.short, density.values, strand.plus.direction)%>%mutate(group = "upperRandomDensity")%>%mutate(group.main = "random")
lowerRandomDensityValues <- randomDensity%>%mutate(density.values= lowerRandomDensity)%>%select(distance.breaks.short, density.values, strand.plus.direction)%>%mutate(group = "lowerRandomDensity")%>%mutate(group.main = "random")
meanRandomDensityValues <- randomDensity%>%mutate(density.values= meanDensity)%>%select(distance.breaks.short, density.values, strand.plus.direction)%>%mutate(group = "meanDensity")%>%mutate(group.main = "random")
binsDat <- rbind(targetDensity, upperRandomDensityValues, lowerRandomDensityValues, meanRandomDensityValues)
return(binsDat)
}
subsetDataSummary <- function(subsetDat = assembySummary, column.type = columns){
subsetList <- vector("list", length(column.type))
j <- 1
for(j in 1:length(column.type)){
i <- column.type[j]
if(i == "Genomes"){
subsetList[[j]] <- c(i, nrow(subsetDat))
}
if(i == "Arrays"){
subsetList[[j]] <- c(i, nrow(subsetDat%>%filter(arrays.present)))
}
if(i == "Subtypes"){
subsetList[[j]] <- c(i, nrow(subsetDat%>%filter(subtype.present)))
}
if(i == "Genes"){
subsetList[[j]] <- c(i, nrow(subsetDat%>%filter(proteins.present)))
}
if(i == "Number of Spacers"){
subsetList[[j]] <- c(i, sum(subsetDat$n.of.spacers, na.rm = T))
}
if(i == "Number of Arrays"){
subsetList[[j]] <- c(i, sum(subsetDat$n.of.arrays, na.rm = T))
}
if(i == "Subtypes and arrays"){
subsetList[[j]] <- c(i, nrow(subsetDat%>%filter(array.and_subtype == "True System")))
}
if(i == "Single Subtypes"){
subsetList[[j]] <- c(i, nrow(subsetDat%>%filter(single.system)))
}
##Add these when I have the subsetData frame to look at
if(i == "Hits"){
subsetList[[j]] <- c(i, nrow(subsetDat%>%filter(subtype.present)))
}
if(i == "Phage Genomes"){
subsetList[[j]] <- c(i, nrow(subsetDat%>%filter(subtype.present)))
}
if(i == "Host Genomes"){
subsetList[[j]] <- c(i, nrow(subsetDat%>%filter(subtype.present)))
}
if(i == "Host-target pairs"){
subsetList[[j]] <- c(i, nrow(subsetDat%>%filter(subtype.present)))
}
}
return(subsetList)
}
dataSummary <- function(dat = assembySummary, column.type = columns, data.subset = data.types){
summaryList <- vector("list", length(data.subset))
for(i in 1:length(data.subset)){
j <- data.subset[i]
if(j == "All"){
summaryList[[j]] <- subsetDataSummary(subsetDat = dat, column.type = column.type)
}
if(j == "Representative"){
summaryList[[j]] <- subsetDataSummary(subsetDat = dat%>%filter(refseq_category == "representative genome"), column.type = column.type)
}
if(j == "Complete"){
summaryList[[j]] <- subsetDataSummary(subsetDat = dat%>%filter(assembly_level == "Complete Genome"), column.type = column.type)
}
if(j == "Archaea"){
summaryList[[j]] <- subsetDataSummary(subsetDat = dat%>%filter(domainName == "Archaea"), column.type = column.type)
}
if(j == "Bacteria"){
summaryList[[j]] <- subsetDataSummary(subsetDat = dat%>%filter(domainName == "Bacteria"), column.type = column.type)
}
if(j == "Bacteria Representative"){
summaryList[[j]] <- subsetDataSummary(subsetDat = dat%>%filter(refseq_category == "representative genome")%>%filter(domainName == "Bacteria"), column.type = column.type)
}
if(j == "Archaea Representative"){
summaryList[[j]] <- subsetDataSummary(subsetDat = dat%>%filter(refseq_category == "representative genome")%>%filter(domainName == "Archaea"), column.type = column.type)
}
}
summaryTable <- data.frame(matrix(unlist(summaryList), nrow = length(column.type)*2, byrow = F))
summaryTable <- summaryTable%>%filter(is.na(match(X1, column.type)))
rownames(summaryTable) <- column.type
colnames(summaryTable) <- data.subset
return(summaryTable)
}
targets.dat <-  read.table("~/Desktop/Project/CRISPRClustering/refseq_79.swipe.one_target_genome.no.arrays.in.targets", comment.char = "", fill = T, sep = "\t", header = T)
targets.dat <- targets.dat%>%mutate(strand.plus.direction = paste(target.strand, five.three.prime.dir, sep = "_"))
targets.dat <- targets.dat%>%mutate(legend.labels = ifelse(strand.plus.direction == "n_3", "Non-target 3' direction", ifelse(strand.plus.direction == "n_5", "Non-target 5' direction",ifelse(strand.plus.direction == "t_3", "Target 3' direction", "Target 5' direction"))))
dat <- targets.dat%>%filter(Subtype == "I-F")
dat <- targets.dat%>%filter(Subtype == "I-F")%>%
filter(hits.count.num => upper.num)
dat <- targets.dat%>%filter(Subtype == "I-F")%>%
filter(hits.count.num >= upper.num)
lower.num <- 2
upper.num <- 3
dat <- targets.dat%>%filter(Subtype == "I-F")%>%
filter(hits.count.num >= upper.num)
View(dat)
lowerData <- dat%>%filter(spacer_order.num == lower.num)%>%select(host.target.pair, protospacer.distance.num, target.start.num)
upperData <- dat%>%filter(spacer_order.num == upper.num)%>%select(host.target.pair, protospacer.distance.num, target.start.num)
lowerData <- dat%>%filter(spacer_order.num == lower.num)%>%select(host.target.pair, protospacer.distance.num, target.start.num)
upperData <- dat%>%filter(spacer_order.num == upper.num)%>%select(host.target.pair, target.start.num)
dat <- left_join(lowerData, upperData, by = "host.target.pair")
View(dat)
dat <- dat%>%mutate(distanceToUpper = target.start.num.y - target.start.num.x)
plot(x = dat$protospacer.distance.num, y = dat$distanceToUpper)
ggplot() +
geom_point(data = dat, aes(x = protospacer.distance.num, y = distanceToUpper))
ggplot() +
geom_point(data = dat, aes(x = protospacer.distance.num, y = distanceToUpper))+
# ggtitle(label = plot.title1, subtitle = plot.subtitle) +
labs(x="Distance from oldest protospacer (nucleotides)",y="Density of hits") +
theme_bw() +
theme(axis.text.x=element_text(size=14),
axis.text.y=element_text(size=14),
plot.title=element_text(size=12, face="bold", color="black"))
ggplot() +
geom_point(data = dat, aes(x = protospacer.distance.num, y = distanceToUpper))+
# ggtitle(label = plot.title1, subtitle = plot.subtitle) +
labs(x=paste("Distance from Priming Protospacer to", lower.num),y=paste("Distanec from", lower.num, "to", upper.num)) +
theme_bw() +
theme(axis.text.x=element_text(size=14),
axis.text.y=element_text(size=14),
plot.title=element_text(size=12, face="bold", color="black"))
runApp('Project/CRISPR_Analysis_Shiny_App')
runApp('Project/CRISPR_Analysis_Shiny_App')
ggplot() +
geom_point(data = dat, aes(x = protospacer.distance.num, y = distanceToUpper))+
# ggtitle(label = plot.title1, subtitle = plot.subtitle) +
labs(x=paste("Distance from the priming protospacer to protospacer number", lower.num),y=paste("Distanec from protospacer number", lower.num, "to protospacer number", upper.num)) +
theme_bw() +
theme(axis.text.x=element_text(size=14),
axis.text.y=element_text(size=14),
plot.title=element_text(size=12, face="bold", color="black"))
nrow(lowerData) & nrow(upperData)> 1
upperData <- dat%>%filter(spacer_order.num == upper.num)%>%select(host.target.pair, target.start.num)%>%filter(spacer_order.num == 4)
dat <- targets.dat%>%filter(Subtype == "I-F")%>%
filter(hits.count.num >= upper.num)
lowerData <- dat%>%filter(spacer_order.num == lower.num)%>%select(host.target.pair, protospacer.distance.num, target.start.num)
upperData <- dat%>%filter(spacer_order.num == upper.num)%>%select(host.target.pair, target.start.num)%>%filter(spacer_order.num == 4)
dat <- targets.dat%>%filter(Subtype == "I-F")%>%
filter(hits.count.num >= upper.num)
dat <- targets.dat%>%filter(Subtype == "I-F")%>%
filter(hits.count.num >= upper.num)
lowerData <- dat%>%filter(spacer_order.num == lower.num)%>%select(host.target.pair, protospacer.distance.num, target.start.num)
upperData <- dat%>%filter(spacer_order.num == upper.num)%>%filter(spacer_order.num == 4)%>%select(host.target.pair, target.start.num)
nrow(lowerData) & nrow(upperData)> 1
runApp('Project/CRISPR_Analysis_Shiny_App')
lowerData <- dat%>%filter(spacer_order.num == lower.num)%>%select(host.target.pair, protospacer.distance.num, target.start.num)
upperData <- dat%>%filter(spacer_order.num == upper.num)%>%select(host.target.pair, target.start.num)
if(nrow(lowerData) & nrow(upperData)> 1){
dat <- left_join(lowerData, upperData, by = "host.target.pair")
dat <- dat%>%mutate(distanceToUpper = target.start.num.y - target.start.num.x)
p <- suppressWarnings(ggplot() +
geom_point(data = dat, aes(x = protospacer.distance.num, y = distanceToUpper))+
# ggtitle(label = plot.title1, subtitle = plot.subtitle) +
labs(x=paste("Distance from the priming protospacer to protospacer number", lower.num),y=paste("Distanec from protospacer number", lower.num, "to protospacer number", upper.num)) +
theme_bw() +
theme(axis.text.x=element_text(size=14),
axis.text.y=element_text(size=14),
plot.title=element_text(size=12, face="bold", color="black"))
)
p
}
runApp('Project/CRISPR_Analysis_Shiny_App')
runApp('Project/CRISPR_Analysis_Shiny_App')
runApp('Project/CRISPR_Analysis_Shiny_App')
runApp('Project/CRISPR_Analysis_Shiny_App')
